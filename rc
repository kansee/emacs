(require 'cl) ; a rare necessary use of REQUIRE
(defvar *emacs-load-start* (current-time))
(add-to-list 'load-path "d:/elisp/")
(add-to-list 'load-path "d:/elisp/emacs-nav/")
(add-to-list 'load-path "d:/elisp/auto-complete-1.2/")
(add-to-list 'load-path "d:/elisp/php-mode-1.5.0/")
;;(add-to-list 'load-path "d:/elisp/efs-1.24/")
(add-to-list 'load-path "d:/elisp/color-theme-6.6.0/")
(add-to-list 'load-path "d:/elisp/geben-0.26/")
(add-to-list 'load-path "d:/elisp/delicious-el/")
(add-to-list 'load-path "d:/elisp/rest/")
(add-to-list 'load-path "d:/elisp/emacs-cake/")
;;(add-to-list 'load-path "d:/elisp/jonnay-wsh-repl-104e40a/")
(add-to-list 'load-path "d:/elisp/oauth/")
(add-to-list 'load-path "d:/elisp/smarty/")
(add-to-list 'load-path "d:/elisp/http-emacs/")
(add-to-list 'load-path "d:/elisp/linkd/")
(add-to-list 'load-path "d:/elisp/jd-el-8663cf0/")
(add-to-list 'load-path "d:/elisp/annot/")
(add-to-list 'load-path "d:/elisp/rinari")
(add-to-list 'load-path "d:/elisp/rinari/util")
(add-to-list 'load-path "d:/elisp/rhtml")
(add-to-list 'load-path "d:/elisp/eschulte-jump.el-0def544")
(add-to-list 'load-path "d:/elisp/haml")

;;Saving customizations
(cond ((< emacs-major-version 22)
       ;; Emacs 21 customization.
       (setq custom-file "~/.custom-21.el"))
      ((and (= emacs-major-version 22) (< emacs-minor-version 3))
       ;; Emacs 22 customization, before version 22.3.
       (setq custom-file "~/.custom-22.el"))
      (t
       ;; Emacs version 22.3 or later.
       (setq custom-file "~/.emacs-custom.el")))
(load custom-file)
;; no splash screen
(setq inhibit-splash-screen t)
(setq mouse-drag-copy-region nil)  ; stops selection with a mouse being immediately injected to the kill ring
(setq x-select-enable-primary nil)  ; stops killing/yanking interacting with primary X11 selection
(setq x-select-enable-clipboard t)  ; makes killing/yanking interact with clipboard X11 selection

(require 'nav)
(require 'color-theme)
;;(color-theme-initialize)
;;(load-file "d:/elisp/color-theme-twilight.el")
;;(color-theme-twilight)
(require 'zenburn)
(color-theme-zenburn)
(unless (zenburn-format-spec-works-p)
  (zenburn-define-format-spec))
(add-hook 'inf-ruby-mode-hook 'ansi-color-for-comint-mode-on)


;(require 'color-theme-subdued)
;(color-theme-subdued)
					;
					; Set various behaviors...
					;--------------------------------------------------------------------
;; Set up the keyboard so the delete key on both the regular keyboard
;; and the keypad delete the character under the cursor and to the right
;; under X, instead of the default, backspace behavior.
;; always end a file with a newline
(setq require-final-newline t)
(setq column-number-mode t)
;; stop at the end of the file, not just add lines
(setq next-line-add-newlines t)

;;to display time
(display-time)
(setq c-default-style "bsd"
      c-basic-offset 4)
(defun pear/php-mode-init()
  "Set some buffer-local variables."
  (setq case-fold-search t)
  (c-set-offset 'arglist-intro '+)
  (c-set-offset 'arglist-close '0)
  )
;;(add-hook 'php-mode-hook 'pear/php-mode-init)


;;to set the font
;;(set-frame-font "-*-fixedsysttf-*-*-*-*-15-*-*-*-*-*-*-*")

;;to manage the geometric size of initial window.
;;(setq initial-frame-alist '((width . 166) (height . 48)))
;;(setq initial-frame-alist '((width . 81) (height . 48)))
;;(setq default-frame-alist '((width . 81) (height . 45)))

(setq indent-tabs-mode nil)
(setq tab-width 4)
(mouse-avoidance-mode 'jump)                   ; Mouse avoids cursor
(setq default-major-mode 'text-mode)       ; Text-mode is default mode          


;;
;; Set various keybindings...
;;--------------------------------------------------------------------
;;set the keybinding so that you can use f4 for goto line
(global-set-key [f5] 'anything-show-kill-ring)
(global-set-key "\C-xg" 'goto-line)
(global-set-key "\M-?" 'help-command)

;;set the keybinding so that f3 will start the shell
;;(global-set-key [f3] 'shell)
;;set the keybinding so that f5 will start query replace

;;(global-set-key [f6] 'switch-to-buffer)
;;(global-set-key [f7] 'hippie-expand)
(global-set-key [f8] 'ispell)

;;
;; Set window properties...
;;--------------------------------------------------------------------
;;(set-frame-height (selected-frame) 57) 
;;(set-frame-position (selected-frame) 415 1) 

;; display the full path to the current file.
(setq frame-title-format '("%b    (%f)"))
(setq icon-title-format '("Emacs: %b"))
;;(set-message-beep 'ok)



(tool-bar-mode -1)
(menu-bar-mode -1)
;;(scroll-bar-mode nil) 

(when (fboundp 'winner-mode)
  (winner-mode 1))

(if (require 'sml-modeline nil 'noerror)    ;; use sml-modeline if available
  (progn 
    (sml-modeline-mode 1)                   ;; show buffer pos in the mode line
    (scroll-bar-mode -1))                   ;; turn off the scrollbar
  (scroll-bar-mode 1)                       ;; otherwise, show a scrollbar...
  (set-scroll-bar-mode 'right))             ;; ... on the right


(global-set-key [(meta ?/)] 'hippie-expand)
(setq hippie-expand-try-functions-list
      '(try-expand-line
        try-expand-line-all-buffers
        try-expand-list
        try-expand-list-all-buffers
        try-expand-dabbrev
        try-expand-dabbrev-visible
        try-expand-dabbrev-all-buffers
        try-expand-dabbrev-from-kill
        try-complete-file-name
        try-complete-file-name-partially
        try-complete-lisp-symbol
        try-complete-lisp-symbol-partially
        try-expand-whole-kill))
(setq resize-mini-windows t)

(keyboard-translate ?\C-h ?\C-?)

(global-set-key (kbd "C-c r") 'query-replace-regexp)
(defalias 'qrr 'query-replace-regexp)
(defalias 'tt 'toggle-truncate-lines)
(global-set-key (kbd "C-c %") 'replace-regexp)


(global-set-key "\C-x\C-m" 'execute-extended-command)
					;(global-set-key "\C-c\C-m" 'execute-extended-command)

					; y or n is enough


(defalias 'yes-or-no-p 'y-or-n-p)

					; shortening of often used commands
(defalias 'gf 'grep-find)
(defalias 'fd 'find-dired)
(defalias 'sh 'shell)

(defalias 'qrr 'query-replace-regexp)
(defalias 'lml 'list-matching-lines)
(defalias 'dml 'delete-matching-lines)
(defalias 'rof 'recentf-open-files)

(defalias 'eb 'eval-buffer)
(defalias 'er 'eval-region)
(defalias 'ee 'eval-expression)
;;; WINDOW SPLITING
;;(global-set-key (kbd "M-2") 'split-window-vertically) ; was digit-argument
;;(global-set-key (kbd "M-1") 'delete-other-windows) ; was digit-argument
(global-set-key (kbd "M-`") 'other-window) ; was center-line
;;(global-set-key (kbd "M-3") 'delete-window)

(defalias 'list-buffers 'ibuffer)

;;(global-set-key (kbd "<f5>") 'find-file) ; Open file or dir
;;(global-set-key (kbd "<f6>") 'ibuffer) ; list buffers

(global-set-key (kbd "<f7>") 'previous-user-buffer)
(global-set-key (kbd "<f8>") 'next-user-buffer)
(global-set-key (kbd "S-<f7>") 'previous-emacs-buffer) ; Shift+f7
(global-set-key (kbd "S-<f8>") 'next-emacs-buffer) ; Shift+f8

;;(global-set-key (kbd "<f9>") 'kill-this-buffer) ; Close file 
(global-set-key (kbd "S-C-<left>") 'shrink-window-horizontally)
(global-set-key (kbd "S-C-<right>") 'enlarge-window-horizontally)
(global-set-key (kbd "S-C-<down>") 'shrink-window)
(global-set-key (kbd "S-C-<up>") 'enlarge-window)

;;; shift the meaning of C-s and C-M-s
(global-set-key [(control s)] 'isearch-forward-regexp)
(global-set-key [(control meta s)] 'isearch-forward)
(global-set-key [(control r)] 'isearch-backward-regexp)
(global-set-key [(control meta r)] 'isearch-backward)

(show-paren-mode 1)                            ; Highlight parenthesis pairs
(setq blink-matching-paren-distance nil)       ; Blinking parenthesis
					;(setq show-paren-style 'expression)            ; Highlight text between parens
(global-hl-line-mode 1)                        ; Highlight cursor line
(blink-cursor-mode 1)                          ; No blinking cursor
					;(setq-default indicate-empty-lines t)          ; Show empty lines

(icomplete-mode t)
(iswitchb-mode t)

(ido-mode t)
(ido-everywhere 1)
(setq ido-enable-flex-matching t)
(setq ido-create-new-buffer 'always)
;; (setq ido-enable-tramp-completion nil) fail error
(setq ido-enable-last-directory-history nil)
(setq ido-confirm-unique-completion nil)
 (setq ido-show-dot-for-dired nil)
 (setq ido-use-filename-at-point t)
(global-set-key (kbd "C-c /") 'ac-complete-filename)
;; disable auto searching for files unless called explicitly
(setq ido-auto-merge-delay-time 99999)
(require 'msearch)
(define-key ido-file-dir-completion-map (kbd "C-c C-s")
  (lambda()
    (interactive)
    (ido-initiate-auto-merge (current-buffer))))



(global-set-key [(control tab)] 'bury-buffer)
(require 'highlight-parentheses)
(highlight-parentheses-mode t)
(require 'showtip)
(require 'flymake-extension)

(autoload 'hideshowvis-enable "hideshowvis" "Highlight foldable regions")
(require 'hideshow-fringe) 
(dolist (hook (list 'emacs-lisp-mode-hook
		    'c++-mode-hook
					;		     'php-mode-hook
		    ))
  (add-hook hook 'hideshowvis-enable))
(require 'uniquify)

;; flymake
(defun my-flymake-show-help ()
  (when (get-char-property (point) 'flymake-overlay)
    (let ((help (get-char-property (point) 'help-echo)))
      (if help (message "%s" help)))))

(add-hook 'post-command-hook 'my-flymake-show-help)
(require 'wuxch-fringe-bookmark)
(require 'fringe-helper)
(require 'flymake)

(defvar flymake-fringe-overlays nil)
(make-variable-buffer-local 'flymake-fringe-overlays)

(defadvice flymake-make-overlay (after add-to-fringe first
				       (beg end tooltip-text face mouse-face)
				       activate compile)
  (push (fringe-helper-insert-region
         beg end
         (fringe-lib-load (if (eq face 'flymake-errline)
                              fringe-lib-exclamation-mark
                            fringe-lib-question-mark))
         'left-fringe 'font-lock-warning-face)
        flymake-fringe-overlays))

(defadvice flymake-delete-own-overlays (after remove-from-fringe activate
					      compile)
  (mapc 'fringe-helper-remove flymake-fringe-overlays)
  (setq flymake-fringe-overlays nil))

(autoload 'geben "geben" "PHP Debugger on Emacs" t)


;;(load "C:/Program Files/Emacs/EmacsW32/nxhtml/autostart.el")

;;
;; Toggle between PHP & HTML Helper mode.  Useful when working on
;; php files, that can been intertwined with HTML code

(require 'php-mode)
(speedbar-add-supported-extension ".php") ; 
(speedbar-add-supported-extension ".ctp") ; 
(speedbar-add-supported-extension ".js")
(add-to-list 'speedbar-fetch-etags-parse-list
             '("\\.js" . speedbar-parse-c-or-c++tag))
(add-to-list 'auto-mode-alist '("\\.ctp$" . nxml-mode))
(add-to-list 'auto-mode-alist '("\\.zpt$" . nxml-mode))
(add-to-list 'auto-mode-alist '("\\.php$" . php-mode))
(require 'flymake-php)

(defun toggle-php-html-mode ()
  (interactive)
  "Toggle mode between PHP & HTML Helper modes"
  (cond ((string= mode-name "nXML")
         (php-mode))
        ((string= mode-name "PHP")
         (nxml-mode))))

(global-set-key [f2] 'toggle-php-html-mode)



(add-to-list 'load-path
	     "d:/elisp/yasnippet-0.6.1c")

(require 'yasnippet-bundle)
(setq yas/prompt-functions '(yas/dropdown-prompt))
(setq yas/root-directory "d:/elisp/mysnippet/")
(yas/load-directory yas/root-directory)
(add-hook 'php-mode-hook
          #'(lambda ()
              (setq yas/mode-symbol 'html-mode)))
(add-hook 'nxml-mode-hook
          #'(lambda ()
              (setq yas/mode-symbol 'php-mode)))


(require 'auto-complete)
(add-to-list 'ac-dictionary-directories "d:/elisp/auto-complete-1.2/dict")
;;(require 'auto-complete-config)
;;(ac-config-default)
;(require 'auto-complete-extension)
;;(require 'auto-complete+)
;(require 'google-c-style)
(require 'auto-complete-yasnippet)
;;(require 'php-completion)

(global-auto-complete-mode t)
;; (set-default 'ac-sources
;;              '(
;;                ;ac-source-semantic
;;                ac-source-yasnippet
;;                ac-source-abbrev
;;                ac-source-words-in-buffer
;;                ac-source-words-in-all-buffer
;;                ac-source-imenu
;;                ac-source-files-in-current-dir
;;                ac-source-filename
;; ))




(define-key ac-complete-mode-map (kbd "") 'ac-complete)
(define-key ac-complete-mode-map (kbd "C-j")      'ac-complete)
(define-key ac-complete-mode-map (kbd "C-n")      'ac-next)
(define-key ac-complete-mode-map (kbd "C-p")      'ac-previous)
(setq max-lisp-eval-depth 2048)         ; trying to fix max list eval depth 

;;(require 'anything-config)
;;(require 'cake)
;;(global-cake t)
;;(require 'anything-c-cake)
;;(setq anything-sources (list anything-c-source-cake))
;;(defalias 'cc 'cake-complete)

;; Cooperation with auto-complete.el:
;;
;; add these lines to your .emacs file:
(add-hook  'php-mode-hook
	   (lambda ()
	     (when (require 'auto-complete nil t)
	       (make-variable-buffer-local 'ac-sources)
	       (add-to-list 'ac-sources 'ac-source-php-completion)
	       ;; if you like patial match,
	       ;; use `ac-source-php-completion-patial' instead of `ac-source-php-completion'.
	       ;; (add-to-list 'ac-sources 'ac-source-php-completion-patial)
	       (auto-complete-mode t))))
(add-hook 'nxml-mode-hook
          (lambda()
            (local-unset-key (kbd "M-h"))
            (auto-complete-mode t)
            (setq ac-sources '(ac-source-yasnippet ac-source-abbrev ac-source-words-in-buffer))))

(require 'anything-grep)

(add-to-list 'load-path
	     "d:/elisp/completion-ui")

;;(require 'completion-ui)



;(require 'scroll-mode-line-mode)
;(scroll-mode-line-mode  1)
(when (fboundp 'windmove-default-keybindings)
  (windmove-default-keybindings))
(require 'xray)

;;(require 'ange-ftp)
;;(setq ange-ftp-ftp-program-name "D:/Emacs/EmacsW32/gnuwin32/bin/ftp.exe")
;; (require 'tramp)
;; (setq tramp-default-method "ssh")
;; (setq tramp-default-user "shrink"
;;      tramp-default-host "shrinkstack.com"
;;      tramp-default-port "52365")
;;(add-to-list 'backup-directory-alist
;;            (cons tramp-file-name-regexp nil))
;;(setq tramp-default-method "plink")
;;(setq tramp-chunksize 500)

;;(setq ange-ftp-default-user "lss247devteam")
;;(ange-ftp-set-passwd "FTP.livesalesstaff.com" "lss247devteam" "Devteam4728")
;;(setq ange-ftp-default-user "dev@orientationsys.com")
;;(ange-ftp-set-passwd "ftp.orientationsys.com" "dev@orientationsys.com" "Rz)r(H1E1Jti")
;;(setq ange-ftp-default-user "livesalesstaff")
;;(ange-ftp-set-passwd "FTP.livesalesstaff.com" "livesalesstaff" "FOXTROT")



(add-hook 'dired-load-hook (function (lambda () (load "dired-x"))))
(require 'google-define)
(defalias 'ge 'google-define)
(require 'sr-speedbar)
(global-set-key (kbd "s-s") 'sr-speedbar-toggle)


					;(add-to-list 'load-path "d:/elisp/emacs-w3m-1.4.3")


(require 'irfc)
;;
;; Setup your storage directory for RFC documents.
;;
(setq irfc-directory "d:/rfc/")
;;
;; If you want make RFC document load `irfc-mode' automatically,
;; setup like below:
;;
(setq irfc-assoc-mode t)
;;

(require 'anything-irfc)
(setq anything-sources
      (list
       anything-c-source-irfc-table-jump
       ))
;;(require 'xml-rpc)

;;(require 'backpack)
;(require 'snipplr)
;(setq backpack-user        "michael")
;(setq delicious-api-password    "31415926")

;;(setq load-path (cons "d:/elisp/w3/lisp" load-path))
;;(require 'w3-auto)
(require 'swimmers)
(require 'fortune)
(require 'banner)
(setq zone-programs [zone-pgm-five-oclock-swan-dive])
(add-to-list 'load-path "d:/elisp/company-0.4.3/")
(autoload 'company-mode "company" nil t)

(defun complete-or-indent ()
  (interactive)
  (if (company-manual-begin)
      (company-complete-common)
    (indent-according-to-mode)))

(defun indent-or-complete ()
  (interactive)
  (if (looking-at "\\_>")
      (company-complete-common)
    (indent-according-to-mode)))


(keyboard-translate ?\( ?\[)
(keyboard-translate ?\[ ?\()
(keyboard-translate ?\) ?\])
(keyboard-translate ?\] ?\))





(require 'smarttabs)
(setq-default indent-tabs-mode nil)

(add-hook 'c-mode-common-hook
          (lambda () (setq indent-tabs-mode nil)))
(setq-default tab-width 4) ; or any other preferred value
(require 'autopair)
(autopair-global-mode) ;; to enable in all buffers


(defadvice align (around smart-tabs activate)
  (let ((indent-tabs-mode nil)) ad-do-it))

(defadvice align-regexp (around smart-tabs activate)
  (let ((indent-tabs-mode nil)) ad-do-it))

(defadvice indent-relative (around smart-tabs activate)
  (let ((indent-tabs-mode nil)) ad-do-it))

(defadvice indent-according-to-mode (around smart-tabs activate)
  (let ((indent-tabs-mode indent-tabs-mode))
    (if (memq indent-line-function
	      '(indent-relative
		indent-relative-maybe))
	(setq indent-tabs-mode nil))
    ad-do-it))

(defmacro smart-tabs-advice (function offset)
  (defvaralias offset 'tab-width)
  `(defadvice ,function (around smart-tabs activate)
     (cond
      (indent-tabs-mode
       (save-excursion
	 (beginning-of-line)
	 (while (looking-at "\t*\\( +\\)\t+")
	   (replace-match "" nil nil nil 1)))
       (setq tab-width tab-width)
       (let ((tab-width fill-column)
	     (,offset fill-column))
	 ad-do-it))
      (t
       ad-do-it))))

(smart-tabs-advice c-indent-line c-basic-offset)
(smart-tabs-advice c-indent-region c-basic-offset)

(put 'narrow-to-region 'disabled nil)

(add-to-list 'auto-mode-alist '("\\.org$" . org-mode))
 (define-key global-map "\C-cl" 'org-store-link)
 (define-key global-map "\C-ca" 'org-agenda)
 (setq org-log-done t) 

(setq org-agenda-files (list "d:/org/work.org"))
;; see http://www.gnu.org/software/emacs/manual/html_node/emacs/Standard-Faces.html
(set-face-background 'modeline          "#4466aa")
(set-face-background 'modeline-inactive "#99aaff")
(set-face-background 'fringe "#809088")
(setq sql-mysql-options '("-C" "-t" "-f" "-n"))
(eval-after-load "sql"
   '(load-library "sql-indent"))
 (defun my-sql-save-history-hook ()
    (let ((lval 'sql-input-ring-file-name)
          (rval 'sql-product))
      (if (symbol-value rval)
          (let ((filename 
                 (concat "~/.emacs.d/sql/"
                         (symbol-name (symbol-value rval))
                         "-history.sql")))
            (set (make-local-variable lval) filename))
        (error
         (format "SQL history will not be saved because %s is nil"
                 (symbol-name rval))))))
  (add-hook 'sql-interactive-mode-hook 'my-sql-save-history-hook)
(defalias 'sql-get-login 'ignore)
(require 'mysql)
(defadvice sql-send-region (after sql-store-in-history)
      "The region sent to the SQLi process is also stored in the history."
      (let ((history (buffer-substring-no-properties start end)))
        (save-excursion
          (set-buffer sql-buffer)
          (message history)
          (if (and (funcall comint-input-filter history)
                   (or (null comint-input-ignoredups)
                       (not (ring-p comint-input-ring))
                       (ring-empty-p comint-input-ring)
                       (not (string-equal (ring-ref comint-input-ring 0)
                                          history))))
              (ring-insert comint-input-ring history))
          (setq comint-save-input-ring-index comint-input-ring-index)
          (setq comint-input-ring-index nil))))
    (ad-activate 'sql-send-region)
;(load "d:/elisp/fgallina-multi-web-mode-abd55ad/load.el")
;;(require 'w32-browser)
(require 'dired-details)
(dired-details-install)
(require 'dired-details+)
(require 'dired+)
;(let ((width (/ (frame-width) 3)))
 ; (split-window-horizontally (- width))
 ; (split-window-horizontally (- width)))
(require 'cursor-chg)  ; Load this library
(change-cursor-mode 1) ; On for overwrite/read-only/input mode
(toggle-cursor-type-when-idle 1) ; On when idle
(require 'cursor-change)
;(load "d:/elisp/mode-line-settings.el")
;;(require 'setup-cygwin)
;;(add-to-list 'auto-mode-alist '("\\.js$" . js2-mode))


;;(autoload 'js2-mode "js2" nil t)
;;(add-to-list 'auto-mode-alist '("\\.js$" . js2-mode))
(autoload #'espresso-mode "espresso" "Start espresso-mode" t)
(add-to-list 'auto-mode-alist '("\\.js$" . espresso-mode))
(add-to-list 'auto-mode-alist '("\\.json$" . espresso-mode))


(require 'js-comint)
(setq inferior-js-program-command "java org.mozilla.javascript.tools.shell.Main")
(add-hook 'espresso-mode-hook '(lambda () 
			    (local-set-key "\C-x\C-e" 'js-send-last-sexp)
			    (local-set-key "\C-\M-x" 'js-send-last-sexp-and-go)
			    (local-set-key "\C-cb" 'js-send-buffer)
			    (local-set-key "\C-c\C-b" 'js-send-buffer-and-go)
			    (local-set-key "\C-cl" 'js-load-file-and-go)
			    ))
(defun my-js-setup-flymake ()
  (flymake-mode 1)
  (local-set-key (kbd "C-c n") 'flymake-goto-next-error)
  (local-set-key (kbd "C-c p") 'flymake-goto-prev-error)
  (local-set-key (kbd "C-c t") 'flymake-js-toggle-method))

(add-hook 'espresso-mode-hook 'my-js-setup-flymake)
(require 'moz)

(autoload 'inferior-moz-mode "moz" "MozRepl Inferior Mode" t)
(autoload 'moz-minor-mode "moz" "MozRepl Minor Mode" t)
(add-hook 'espresso-mode-hook 'javascript-moz-setup)
(defun javascript-moz-setup () (moz-minor-mode 1))
(require 'json)
 
(defun moz-update (&rest ignored)
  "Update the remote mozrepl instance"
  (interactive)
  (comint-send-string (inferior-moz-process)
    (concat "content.document.body.innerHTML="
             (json-encode (buffer-string)) ";")))
 
(defun moz-enable-auto-update ()
  "Automatically the remote mozrepl when this buffer changes"
  (interactive)
  (add-hook 'after-change-functions 'moz-update t t))
 
(defun moz-disable-auto-update ()
  "Disable automatic mozrepl updates"
  (interactive)
  (remove-hook 'after-change-functions 'moz-update t))
 (defun dos2unix (buffer)
      "Automate M-% C-q C-m RET C-q C-j RET"
      (interactive "*b")
      (save-excursion
        (goto-char (point-min))
        (while (search-forward (string ?\C-m) nil t)
          (replace-match (string ?\C-j) nil t))))

(defun auto-reload-firefox-on-after-save-hook ()         
          (add-hook 'after-save-hook
                       '(lambda ()
                          (interactive)
                          (comint-send-string (inferior-moz-process)
                                              "setTimeout(BrowserReload(), \"1000\");"))
                       'append 'local)) ; buffer-local

;; Example - you may want to add hooks for your own modes.
;; I also add this to python-mode when doing django development.
;(add-hook 'html-mode-hook 'auto-reload-firefox-on-after-save-hook)
;(add-hook 'css-mode-hook 'auto-reload-firefox-on-after-save-hook)
;(add-hook 'nxml-mode-hook 'auto-reload-firefox-on-after-save-hook)

(require 'zencoding-mode)
(add-hook 'nxml-mode-hook 'zencoding-mode) ;; Auto-start on any markup modes
(add-hook 'php-mode-hook 'zencoding-mode) ;; Auto-start on any markup modes
;;(require 'nxml-where)
(require 'init-backup)
;(autoload 'camelCase-mode "camelCase-mode" nil t)
;(add-hook 'php-mode-hook '(lambda () (camelCase-mode 1)))
(require 'plural)
(require 'anything-etags)
(setq anything-sources
      '(anything-etags-c-source-etags-select
        ))
(setq anything-etags-enable-tag-file-dir-cache t)
(setq anything-etags-cache-tag-file-dir "d:/output/")

(add-hook 'before-save-hook           
          '(lambda ()              
             (or (file-exists-p (file-name-directory buffer-file-name))
                 (make-directory (file-name-directory buffer-file-name) t))))
(require 'find-file-in-project)

;;(add-hook 'emacs-lisp-mode-hook (lambda () (setl ffip-regexp ".*\\.el")))

(global-set-key (kbd "C-x C-M-f") 'find-file-in-project)
;(load-file "d:/elisp/eproject-0.3/eproject.el")
(require 'project-buffer-mode)


;;(setenv "PATH" (concat "d:/cygwin/bin;" (getenv "PATH")))
;;(setq exec-path (cons "d:/cygwin/bin/" exec-path))

(require 'recentf)
(recentf-mode 1)
;;(recentf-open-files nil "*Recent Files*")
(setq recentf-max-saved-items 100)

;(setq find-program "C:\\Program Files\\Emacs\\EmacsW32\\gnuwin32\\bin\\find.exe")
(require 'iflipb)
(global-set-key (kbd "M-h") 'iflipb-next-buffer)
(global-set-key (kbd "M-H") 'iflipb-previous-buffer)
(require 'motion-and-kill-dwim)
(global-set-key "\C-w" 'backward-kill-dwim)
(global-set-key "\M-w" 'copy-region-as-kill-dwim)
;;(global-set-key "\C-w" 'backward-kill-word)
;;(global-set-key "\C-x\C-k" 'kill-region)
;;(global-set-key "\C-c\C-k" 'kill-region)

(global-unset-key (kbd "C-x m"))
(require 'smex)
(smex-initialize)
;;(add-hook 'after-init-hook 'smex-initialize)

(global-set-key (kbd "C-x C-m") 'smex)
(global-set-key (kbd "M-X") 'smex-major-mode-commands)
(global-set-key (kbd "C-x M-x") 'smex-update-and-run)
;; This is your old M-x.
(global-set-key (kbd "C-c C-c M-x") 'execute-extended-command)

(load "d:/elisp/emacsed.el")
(require 'ed)
(define-key isearch-mode-map [(control h)] 'isearch-mode-help)
(add-to-list 'auto-mode-alist '("\\.[Cc][Ss][Vv]\\'" . csv-mode))
(autoload 'csv-mode "csv-mode"
   "Major mode for editing comma-separated value files." t)

(require 'vcard)
;; rest of your .emacs goes here
;;(require 'wsh-repl)

;;svn
;; (require 'psvn)
;; (autoload 'svn-status "dsvn" "Run `svn status'." t)
;; (autoload 'svn-update "dsvn" "Run `svn update'." t)

;;(require 'minimap)
(defun rotate-windows ()
  "Rotate your windows" 
  (interactive)
  (cond 
   ((not (> (count-windows) 1))
    (message "You can't rotate a sinlge window!"))
   (t
    (setq i 1)
    (setq numWindows (count-windows))
    (while  (< i numWindows)
      (let* (
             (w1 (elt (window-list) i))
             (w2 (elt (window-list) (+ (% i numWindows) 1)))

             (b1 (window-buffer w1))
             (b2 (window-buffer w2))

             (s1 (window-start w1))
             (s2 (window-start w2))
             )
        (set-window-buffer w1  b2)
        (set-window-buffer w2 b1)
        (set-window-start w1 s2)
        (set-window-start w2 s1)
        (setq i (1+ i)))))))
(global-set-key (kbd "<f9>") 'rotate-windows)
(defun google ()
  "Googles a query or region if any."
  (interactive)
  (browse-url
   (concat
    "http://www.google.com/search?ie=utf-8&oe=utf-8&q="
    (if mark-active
        (buffer-substring (region-beginning) (region-end))
      (read-string "Query: ")))))

(defun google-region (beg end)
  "Google the selected region."
  (interactive "r")
  (browse-url (concat "http://www.google.com/search?ie=utf-8&oe=utf-8&q=" (buffer-substring beg end))))


(require 'ibuffer)
(setq ibuffer-saved-filter-groups
  (quote (("default"      
            ("Org" ;; all org-related buffers
              (mode . org-mode))  
            ("Ecshop" ;; all org-related buffers
              (mode . html-mode))

            ("Mail"
              (or  ;; mail-related buffers
               (mode . message-mode)
               (mode . mail-mode)
               ;; etc.; all your mail related modes
               ))
            ("cake"
              (or  ;; mail-related buffers
               (mode . php-mode)
               (mode . nxml-mode)
               ;; etc.; all your mail related modes
               ))

            ("Programming" ;; prog stuff not already in MyProjectX
              (or
                (mode . c-mode)
                (mode . perl-mode)
                (mode . python-mode)
                (mode . emacs-lisp-mode)
                ;; etc
                )) 
            ("ERC"   (mode . erc-mode))))))

(add-hook 'ibuffer-mode-hook
  (lambda ()
    (ibuffer-switch-to-saved-filter-groups "default")))
(setq cua-enable-cua-keys nil) ;; only for rectangles
;;(cua-mode t)
(load "d:/elisp/eshell-config.el")
(require 'shell-pop)
(shell-pop-set-internal-mode "eshell")
;;(shell-pop-set-internal-mode-shell "/bin/bash")
(shell-pop-set-window-height 60) ;the number for the percentage of the selected window. if 100, shell-pop use the whole of selected window, not spliting.
(shell-pop-set-window-position "bottom") ;shell-pop-up position. You can choose "top" or "bottom". 
(global-set-key [f8] 'shell-pop)

;;(require 'yammer)
;;(yammer-authenticate)
(require 'wide-n)
(require 'fix-buffers-list)
(require 'font-lock)  ; define more faces (colours)
(setq list-buffers-compact t)
(setq list-buffers-status-face   'font-lock-string-face)
(setq list-buffers-modified-face 'font-lock-warning-face)
(require 'wide-n)
;;(require 'linkd)
(require 'pos-tip)
(defun my-describe-function (function)
   "Display the full documentation of FUNCTION (a symbol) in tooltip."
   (interactive (list (function-called-at-point)))
   (if (null function)
       (pos-tip-show
        "** You didn't specify a function! **" '("red"))
     (pos-tip-show
      (with-temp-buffer
        (let ((standard-output (current-buffer))
              (help-xref-following t))
          (prin1 function)
          (princ " is ")
          (describe-function-1 function)
          (buffer-string)))
      nil nil nil 0)))

(define-key emacs-lisp-mode-map (kbd "C-;") 'my-describe-function)
(autoload 'smarty-mode "smarty-mode" "Smarty Mode" t)
(setq auto-mode-alist
      (append
       '(("\\.lbi$" .smarty-mode))
       auto-mode-alist))
(require 'http-get)

(defun http-find-file-sentinel (proc message)
  (switch-to-buffer (process-buffer proc))
  (http-decode-buffer)
  (set-visited-file-name (concat "/tmp/" buffer-name)))

(defun http-find-file (url)
  (interactive "sURL: ")
  (setq splitted-url (split-string url "/"))
  (setq buffer-name (first (last splitted-url)))
  (http-get url nil 'http-find-file-sentinel nil buffer-name nil))

(autoload 'tidy-buffer "tidy" "Run Tidy HTML parser on current buffer" t)
(autoload 'tidy-parse-config-file "tidy" "Parse the `tidy-config-file'" t)
(autoload 'tidy-save-settings "tidy" "Save settings to `tidy-config-file'" t)
(autoload 'tidy-build-menu  "tidy" "Install an options menu for HTML Tidy." t)
(global-set-key (kbd "C-x p")
                (lambda ()
                  (interactive)
                  (comint-send-string (inferior-moz-process)
                                      "BrowserReload();")))
;; (require 'linkd)
;; (setq linkd-use-icons t)
;; (setq linkd-icons-directory "d:/elisp/linkd/icons/") ;; or wherever you put it
;; (add-hook 'emacs-lisp-mode-hook 'linkd-mode)
;; (add-hook 'lisp-mode-hook 'linkd-mode)
;; (add-hook 'nxml-mode-hook 'linkd-mode)
;; (add-hook 'php-mode-hook 'linkd-mode)
;; (add-hook 'sh-mode-hook 'linkd-mode)
;; (add-hook 'text-mode-hook 'linkd-mode)
;; (global-set-key [(control \&)] 'linkd-follow-on-this-line)
;; (global-set-key [(control f3)] 'linkd-process-block)
;; (global-set-key (kbd "M-[") 'linkd-previous-link)
;; (global-set-key (kbd "M-]") 'linkd-next-link)
;; (global-set-key (kbd "M-RET") 'linkd-follow-at-point)
(require 'tabbar)

;; options
(require 'etags-select)
;;(global-set-key "\M-?" 'etags-select-find-tag-at-point)
(global-set-key "\M-." 'etags-select-find-tag)


(require 'iedit)
(define-key global-map (kbd "C-;") 'iedit-mode)
(define-key isearch-mode-map (kbd "C-;") 'iedit-mode)
;; run php lint when press f8 key
;; php lint
(defun phplint-thisfile ()
  (interactive)
  (compile (format "php -l %s" (buffer-file-name))))
(add-hook 'php-mode-hook
          '(lambda ()
             (local-set-key [f12] 'phplint-thisfile)))
;; end of php lint
;;(require 'annot)
(require 'google-maps)
(defun split-window-4()
  (interactive)
  (progn (split-window-vertically)
         (split-window-horizontally)
         (other-window 2)
         (split-window-horizontally))
)
(global-set-key "\C-x4w" 'split-window-4)

(require 'workgroups)
(add-hook 'after-init-hook 'workgroups-load-configs)
;; - to change the file that window-configs are saved in:
;;(setq workgroups-configs-file "/path/to/new/file")
; Some sample keybindings:
(global-set-key (kbd "C-c g a") 'workgroups-add-config)
(global-set-key (kbd "C-c g r") 'workgroups-restore-config)
(global-set-key (kbd "C-c g d") 'workgroups-delete-config)
(global-set-key (kbd "C-c g u") 'workgroups-update-config)
(global-set-key (kbd "C-c g p") 'workgroups-prev-config)
(global-set-key (kbd "C-c g n") 'workgroups-next-config)
;; And if you use ido-mode:
(global-set-key (kbd "C-c g A") 'workgroups-ido-add-config)
(global-set-key (kbd "C-c g R") 'workgroups-ido-restore-config)
(global-set-key (kbd "C-c g D") 'workgroups-ido-delete-config)
(require 'dim-switch-window)


(autoload 'findr "findr" "Find file name." t)
(define-key global-map [(meta control S)] 'findr)

(autoload 'findr-search "findr" "Find text in files." t)
(define-key global-map [(meta control s)] 'findr-search)

(autoload 'findr-query-replace "findr" "Replace text in files." t)
(define-key global-map [(meta control r)] 'findr-query-replace)

(require 'jump)
(defjump
  'rinari-find-model
  '(("app/controllers/\\1_controller.rb#\\2"  . "app/models/\\1.rb#\\2")
    ("app/views/\\1/.*"                       . "app/models/\\1.rb")
    ("app/helpers/\\1_helper.rb"              . "app/models/\\1.rb")
    ("db/migrate/.*create_\\1.rb"             . "app/models/\\1.rb")
    ("test/functional/\\1_controller_test.rb" . "app/models/\\1.rb")
    ("test/unit/\\1_test.rb#test_\\2"         . "app/models/\\1.rb#\\2")
    ("test/unit/\\1_test.rb"                  . "app/models/\\1.rb")
    ("test/fixtures/\\1.yml"                  . "app/models/\\1.rb")
    (t                                        . "app/models/"))
  'rinari-root
  "Go to the most logical model given the current location."
  '(lambda (path)
     (message (shell-command-to-string
	       (format "ruby %sscript/generate model %s"
		       (rinari-root)
		       (and (string-match ".*/\\(.+?\\)\.rb" path)
			    (match-string 1 path))))))
  'ruby-add-log-current-method)
(autoload 'ruby-mode "ruby-mode" "Major mode for ruby files" t)
(add-to-list 'auto-mode-alist '("\\.rb$" . ruby-mode))
(add-to-list 'interpreter-mode-alist '("ruby" . ruby-mode))

(autoload 'inf-ruby "inf-ruby" "Run an inferior Ruby process" t)
(autoload 'inf-ruby-keys "inf-ruby" "" t)
(eval-after-load 'ruby-mode
  '(add-hook 'ruby-mode-hook 'inf-ruby-keys))

(require 'rinari)
;;; rhtml mode
(require 'rhtml-mode)
(add-to-list 'auto-mode-alist '("\\.rhtml$" . rhtml-mode))
(add-hook 'rhtml-mode-hook
     	  (lambda () (rinari-launch)))
(require 'multi-term)
;;(require 'pretty-mode)
;;(global-pretty-mode 1)
(autoload 'markdown-mode "markdown-mode.el"
       "Major mode for editing Markdown files" t)
  (setq auto-mode-alist
        (cons '("\\.txt" . markdown-mode) auto-mode-alist))
(require 'haml-mode)
(require 'sass-mode)


(message "My .emacs loaded in %ds" (destructuring-bind (hi lo ms) (current-time)
				     (- (+ hi lo) (+ (first *emacs-load-start*) (second *emacs-load-start*)))))
(put 'scroll-left 'disabled nil)









